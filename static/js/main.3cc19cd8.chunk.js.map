{"version":3,"sources":["components/feedback/FeedbackOptions.js","components/statistics/statistics.js","App.js","index.js"],"names":["FeedbackOptions","onLeaveFeedback","className","onClick","Statistics","this","props","good","neutral","bad","total","positivePercentage","Component","App","state","goodProps","neutralProps","badProps","event","target","setState","prevState","console","log","countTotalFeedback","toFixed","countPositiveFeedbackPercentage","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAoBeA,EAhBQ,SAAC,GAAD,IAAEC,EAAF,EAAEA,gBAAF,OACrB,gCACA,wBAAQC,UAAU,OAAOC,QAASF,EAAlC,kBACA,wBAAQC,UAAU,UAASC,QAASF,EAApC,qBACA,wBAAQC,UAAU,MAAKC,QAASF,EAAhC,qBC4BaG,E,4JArBX,WACE,MAAqDC,KAAKC,MAAlDC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAIC,EAA3B,EAA2BA,MAAMC,EAAjC,EAAiCA,mBAI/B,OACI,gCACF,sLAAiCJ,KACjC,8MAAqCC,KACrC,gLAAgCC,KAChC,yKAA8BC,KAC/B,yOAA4CC,EAA5C,c,GAtBgBC,aCCnBC,E,4MAaJC,MAAQ,CACNP,KAAM,EAAKD,MAAMS,UACjBP,QAAS,EAAKF,MAAMU,aACpBP,IAAK,EAAKH,MAAMW,U,EAElBhB,gBAAgB,SAACiB,GACc,SAAzBA,EAAMC,OAAOjB,UACf,EAAKkB,UAAS,SAACC,GAAa,MAAO,CAACd,KAAKc,EAAUd,KAAK,MACvB,YAAzBW,EAAMC,OAAOjB,UACrB,EAAKkB,UAAS,SAACC,GAAa,MAAO,CAACb,QAAQa,EAAUb,QAAQ,MAC5B,QAAzBU,EAAMC,OAAOjB,WACtB,EAAKkB,UAAS,SAACC,GAAa,MAAO,CAACZ,IAAIY,EAAUZ,IAAI,MAExDa,QAAQC,IAAI,EAAKT,Q,wDAGnB,WACE,OAAOT,KAAKS,MAAMP,KAAKF,KAAKS,MAAMN,QAAQH,KAAKS,MAAML,M,6CAEvD,WAEE,OADyC,IAAhBJ,KAAKS,MAAMP,KAASF,KAAKmB,sBACxBC,QAAQ,K,oBAKpC,WACE,MAAyBpB,KAAKS,MAAvBP,EAAP,EAAOA,KAAKC,EAAZ,EAAYA,QAAQC,EAApB,EAAoBA,IAGjB,OAGD,qCACE,uDACA,cAAC,EAAD,CAAkBR,gBAAiBI,KAAKJ,kBAIxC,4CACA,cAAC,EAAD,CAAYM,KAAMA,EAAME,IAAKA,EAAKD,QAASA,EAASE,MAAOL,KAAKmB,qBAAsBb,mBAAoBN,KAAKqB,2C,GArDrGd,aAAZC,EACGc,aAAa,CAEhBZ,UAAU,EACVC,aAAa,EACbC,SAAS,GA4DAJ,QChEfe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3cc19cd8.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst FeedbackOptions= ({onLeaveFeedback})=>(\r\n  <div>\r\n  <button className=\"Good\" onClick={onLeaveFeedback}>Good</button>\r\n  <button className=\"Neutral\"onClick={onLeaveFeedback}>Neutral</button>\r\n  <button className=\"Bad\"onClick={onLeaveFeedback}>Bad</button>\r\n \r\n  \r\n \r\n</div>\r\n\r\n)\r\nFeedbackOptions.propTypes ={\r\n onLeaveFeedback:PropTypes.func.isRequired\r\n }\r\n\r\n\r\nexport default FeedbackOptions;","import React,{Component} from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nclass Statistics extends Component{\r\n  static propTypes={\r\n    good:PropTypes.number,\r\n    neutral:PropTypes.number,\r\n    bad:PropTypes.number,\r\n    total:PropTypes.number,\r\n    positivePercentage:PropTypes.string\r\n  }\r\n    \r\n         \r\n   \r\n    render(){\r\n      const { good, neutral, bad,total,positivePercentage}=this.props;\r\n      \r\n      \r\n        \r\n        return (\r\n            <div>\r\n          <p>Кол-во хороших комментариев: {good}</p>\r\n          <p>Кол-во нейтральных комментариев: {neutral}</p>\r\n          <p>Кол-во плохих комментариев: {bad}</p>\r\n          <p>Общее кол-во комментариев:{total}</p>\r\n         <p>% хороших комментариев от общего кол-ва:{positivePercentage}%</p>\r\n         \r\n        </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Statistics;","import React,{Component} from 'react';\nimport PropTypes from 'prop-types'\nimport FeedbackOptions from './components/feedback/'\nimport Statistics from './components/statistics';\n\nclass App extends Component {\n  static defaultProps={\n    \n      goodProps:5,\n      neutralProps:2,\n      badProps:2\n     \n  }\n  static propTypes={\n    goodProps:PropTypes.number,\n    neutralProps:PropTypes.number,\n    badProps:PropTypes.number\n  }\n  state = {\n    good: this.props.goodProps,\n    neutral: this.props.neutralProps,\n    bad: this.props.badProps\n  }\n  onLeaveFeedback=(event)=>{\n    if (event.target.className==='Good'){\n      this.setState((prevState)=>{return {good:prevState.good+1}})\n    } else if(event.target.className==='Neutral'){\n      this.setState((prevState)=>{return {neutral:prevState.neutral+1}})\n    } else if (event.target.className==='Bad'){\n      this.setState((prevState)=>{return {bad:prevState.bad+1}})\n    }\n    console.log(this.state)\n\n  }\n  countTotalFeedback(){\n    return this.state.good+this.state.neutral+this.state.bad\n  }\n  countPositiveFeedbackPercentage(){\n    const positivePercentage=this.state.good*100/this.countTotalFeedback()\n    return positivePercentage.toFixed(2)\n  }\n\n \n \n  render() {\n    const {good,neutral,bad}=this.state;\n    \n    \n       return (\n      \n\n      <>\n        <h1>Please leave feedback</h1> \n        <FeedbackOptions  onLeaveFeedback={this.onLeaveFeedback}/>\n              \n\n       \n        <h3>Statistics</h3>\n        <Statistics good={good} bad={bad} neutral={neutral} total={this.countTotalFeedback()} positivePercentage={this.countPositiveFeedbackPercentage()} />\n\n              \n      </>\n    );\n\n  }}\n\n    \n  \n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}